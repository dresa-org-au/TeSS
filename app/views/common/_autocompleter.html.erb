<% model_name = f.object.class.name.underscore %>
<% form_field_name = "#{model_name}[#{field_name.to_s.singularize}_#{id_field.to_s}s]" %>
<% template ||= nil %>
<% data = { role: 'autocompleter-group', url: url, prefix: form_field_name,
            'label-field' => label_field.to_s,
            'id-field' => id_field.to_s } %>
<% data[:template] = template if template %>
<% json = f.object.send(field_name).map do |r|
  { item: { id_field => r.send(id_field), label_field => r.send(label_field) },
    prefix: form_field_name }
  end.to_json %>

<div class="form-group">
  <%= f.label field_name %><%= f.field_lock(field_name.to_sym) if f.object.respond_to?(:locked_fields) %>

  <%= content_tag(:div, data: data) do %>
      <%= content_tag :script, json.html_safe, type: 'application/json', data: { role: 'autocompleter-existing' } %>
      <%# This blank association is needed to trigger the delete when all associations are removed %>
      <input type="hidden" name="<%= form_field_name -%>[]" value="" />

      <ul data-role="autocompleter-list">
        <%# Populated via javascript from the JSON above %>
      </ul>
      <input type="text" data-role="autocompleter-input" autocomplete="off" class="form-control" placeholder="Add a new <%= field_name.to_s.humanize(capitalize: false).singularize -%>...">
  <% end %>
</div>
